#!/usr/bin/env python3
from Crypto.Util.number import *
e = 65537
n = 496571011226095672657697935970290122845548574135822714162203053330028397027391799830065542357718437892607999951493838719088043590226363768080694596432812846416609931341466073290348107743487085049372709724346227540312466046276838198966923883497262807979518431395518170834562987181070094776689001327513574222439
dp = 3229249396565645680932270225067863220868604476746998731543638523417926260889330866970981867504130463063281063059451886197327583778327232473279705448033663
c = 452485095307755005831994042945640010410414848841226969198697428278561362704426163650275614756516275579898413304604980708420498838480366781698595865992378270949519740759098267615290172414058023074724373555894258721891682651859150617615574298229391657384246470524794556014502304299044260463333868568833548662447
#https://code.activestate.com/recipes/474129-extended-great-common-divisor-function/
def egcd(a, b):
    u, u1 = 1, 0
    v, v1 = 0, 1
    g, g1 = a, b
    while g1:
        q = g // g1
        u, u1 = u1, u - q * u1
        v, v1 = v1, v - q * v1
        g, g1 = g1, g - q * g1
    return u, v, g
m = 1
while True:
	p=(dp * e - 1 ) // m + 1
	if n%p == 0:
		print("m=%d"%m)
		print("p=%d"%p)
		break
	m+=1
q = n//p
print("q=%d"%q)
phi = (p-1)*(q-1)
d = egcd(e,phi)[0]%phi
print("d=%d"%d)
print(long_to_bytes(pow(c,d,n)).decode('utf-8'))