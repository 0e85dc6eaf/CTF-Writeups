#!/usr/bin/python2 -u
from hashlib import sha256
from Crypto import Random
from Crypto.Random import random
from Crypto.Cipher import AES
from pwn import *

BLOCK_SIZE = 16
R = Random.new()

def pad(m):
    o = BLOCK_SIZE - len(m) % BLOCK_SIZE
    return m + o * chr(o)

def unpad(p):
    return p[0:-ord(p[-1])]

def send_encrypted(KEY, m):
    IV = R.read(BLOCK_SIZE)
    aes = AES.new(KEY, AES.MODE_CBC, IV)
    c = aes.encrypt(pad(m))
    return (IV + c).encode('hex')

def read_encrypted(KEY, m):
    data = m.decode('hex')
    IV, data = data[:BLOCK_SIZE], data[BLOCK_SIZE:]
    aes = AES.new(KEY, AES.MODE_CBC, IV)
    m = unpad(aes.decrypt(data))
    return m

def serve_commands(KEY):
    while True:
        cmd = read_encrypted(KEY)
        try:
            output = check_output(cmd, shell=True, stderr=STDOUT)
        except CalledProcessError as e:
            output = str(e) + "\n"
        send_encrypted(KEY, output)

r = remote("shell2017.picoctf.com",40209)
p = int(r.recvuntil("g = ").splitlines()[-2][4:])
g = int(r.recvuntil("A = ").splitlines()[0])
A = int(r.recvuntil("Please supply B:").splitlines()[0])
b = random.randint(1, 2**46)
B = pow(g, b, p)
r.send("%d\n"%B)
K = pow(A, b, p)
KEY = sha256(str(K)).digest()
r.send(send_encrypted(KEY,"ThisIsMySecurePasswordPleaseGiveMeAShell\n")+"\n")
r.send(send_encrypted(KEY,"cat flag.txt")+"\n")
print read_encrypted(KEY,r.recvline().strip())