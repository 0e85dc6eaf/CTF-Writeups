#!/usr/bin/env python2
from pwn import *
import gmpy
from Crypto.Util.number import long_to_bytes
r = remote("2019shell1.picoctf.com",30962)
print(r.recvuntil("q :"))
q = int(r.recvline())
print(r.recvuntil("p :"))
p = int(r.recvline())
r.sendline("Y")
r.sendline(str(p*q))
print(r.recvuntil("p :"))
p = int(r.recvline())
print(r.recvuntil("n :"))
n = int(r.recvline())
r.sendline("Y")
r.sendline(str(n//p))
r.sendline("N")
print(r.recvuntil("q :"))
q = int(r.recvline())
print(r.recvuntil("p :"))
p = int(r.recvline())
r.sendline("Y")
r.sendline(str((p-1)*(q-1)))
print(r.recvuntil("plaintext :"))
plain = int(r.recvline())
print(r.recvuntil("e :"))
e = int(r.recvline())
print(r.recvuntil("n :"))
n = int(r.recvline())
r.sendline("Y")
r.sendline(str(pow(plain,e,n)))
r.sendline("N")
print(r.recvuntil("q :"))
q = int(r.recvline())
print(r.recvuntil("p :"))
p = int(r.recvline())
print(r.recvuntil("e :"))
e = int(r.recvline())
r.sendline("Y")
r.sendline(str( gmpy.invert(e,(p-1)*(q-1)) ))
print(r.recvuntil("p :"))
p = int(r.recvline())
print(r.recvuntil("ciphertext :"))
cipher = int(r.recvline())
print(r.recvuntil("e :"))
e = int(r.recvline())
print(r.recvuntil("n :"))
n = int(r.recvline())
phi = (p-1)*(n//p-1)
d = gmpy.invert(e,phi)
plain = pow(cipher,d,n)
r.sendline("Y")
r.sendline(str(plain))
print(long_to_bytes(plain))
r.interactive()