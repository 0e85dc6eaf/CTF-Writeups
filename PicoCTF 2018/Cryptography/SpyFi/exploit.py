#!/usr/bin/env python2
from pwn import *
import sys
import string
MSG = """Agent,
Greetings. My situation report is as follows:

My agent identifying code is: .
Down with the Soviets,
006
"""
context.log_level = 'error'
def encrypt(payload):
	r = remote("2018shell.picoctf.com",37131)
	r.recvuntil('Please enter your situation report: ')
	r.sendline(payload)
	cipher = r.recvline().strip().decode('hex')
	r.close()
	return cipher

def getFlagLength():
	known_len = len(MSG)
	cipher_len = len(encrypt(''))
	padding_len = 0
	while True:
		new_len = len(encrypt((padding_len+1)*'A'))
		if new_len > cipher_len:
			break
		padding_len+=1
	return cipher_len - padding_len - known_len
"""
Agent, Greetings
. My situation r
eport is as foll
ows: XXXXXXXXXXX
fying code is: ?
XXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXX
 My agent identi
fying code is: p
icoCTF{@g3nt6_1$
_th3_c00l3$t_128
9389} Down with
the Soviets, 006
"""
def readSecret(secretLength):
	injectionOffset = 53
	secretOffset = 84
	alignment1Length = (-injectionOffset)%16 # we want to put knownPlaintext in a new block
	alignment2Length = secretLength+(-secretLength)%16 # just to ensure "real_block_offset" doesn't change later
	newSecretOffset = secretOffset+alignment1Length+16+alignment2Length
	alignment3Length = (15-newSecretOffset)%16 # we want first byte of the secret to be the last byte of previous block
	knownPlaintext = MSG[secretOffset-15:secretOffset]
	fake_block_offset = injectionOffset+alignment1Length
	real_block_offset = newSecretOffset+alignment3Length-15
	secret = ""
	sys.stdout.write("[*] Reading secret...: ")
	for i in range(secretLength):
		for c in string.printable:
			cipher = encrypt('x'*alignment1Length + knownPlaintext + c + 'y'*alignment2Length + 'z'*alignment3Length)
			if cipher[fake_block_offset:fake_block_offset+16]==cipher[real_block_offset:real_block_offset+16]:
				secret += c
				knownPlaintext = knownPlaintext[1:]+c
				alignment2Length -= 1
				sys.stdout.write(c)
				sys.stdout.flush()
				break
	sys.stdout.write("\n")
	sys.stdout.flush()
	return secret

flagLen = getFlagLength()
print("Flag length: %d"%flagLen)
flag = readSecret(flagLen)
print("Flag: %s"%flag)