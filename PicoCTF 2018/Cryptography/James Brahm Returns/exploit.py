#!/usr/bin/env python2
from pwn import *
import sys
context.log_level = 'error'

MSG = """Agent,
Greetings. My situation report is as follows:

My agent identifying code is: .
Down with the Soviets,
006
"""

IV_LEN = 16

HASH_LEN = 20

def encrypt(socket,payload1,payload2):
	socket.recvuntil("Send & verify (S)")
	socket.sendline("e")
	socket.recvuntil("Please enter your situation report:")
	socket.sendline(payload1)
	socket.recvuntil("Anything else?")
	socket.sendline(payload2)
	socket.recvuntil("encrypted: ")
	cipher = socket.recvline().strip().decode('hex')
	return cipher

def verify(socket,cipher):
	socket.recvuntil("Send & verify (S)")
	socket.sendline("s")
	socket.recvuntil("Please input the encrypted message:")
	socket.sendline(cipher.encode('hex'))
	data = socket.recvuntil("Select an option:")
	if "Ooops! Did not decrypt successfully." not in data:
		return True
	return False

def getFlagLength():
	r = remote("2018shell.picoctf.com",14263)
	known_len = IV_LEN  + len(MSG) + HASH_LEN
	cipher_len = len(encrypt(r,'',''))
	padding_len = 1
	while True:
		new_len = len(encrypt(r,padding_len*'A',''))
		if new_len > cipher_len:
			break
		padding_len += 1
	r.close()
	return cipher_len - padding_len - known_len

"""
IIIIIIIIIIIIIIII
Agent, Greetings
. My situation r
eport is as foll
ows: XXXXXXXXXXX
XXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXX
 My agent identi
fying code is: p
icoCTF{g0_@g3nt0
06!_4950961}. Do
wn with the Sovi
ets, 006 YYYMMMM
MMMMMMMMMMMMMMMM
PPPPPPPPPPPPPPPP
"""
def readSecret(secretLength):
	injection1Offset = 69
	secretOffset = 100
	alignment1Length = (-injection1Offset)%16 # align to a full block
	alignment2Length = secretLength+(-secretLength)%16 # just to ensure "real_block_offset" doesn't change later
	newSecretOffset = secretOffset+alignment1Length+alignment2Length
	hashOffset = newSecretOffset + secretLength + 4 + 16 + 9
	alignment3Length = (15-newSecretOffset)%16 # we want first byte of the secret to be the last byte of previous block
	alignment4Length = (12-hashOffset)%16 # we want 16 bytes padding
	real_block_offset = newSecretOffset+alignment3Length-15
	secret = ""
	sys.stdout.write("[*] Reading secret...: ")
	for i in range(secretLength):
		while True:
			r = remote("2018shell.picoctf.com",14263)
			cipher = encrypt(r,'x'*alignment1Length+'y'*alignment2Length + 'z'*alignment3Length,'a'*alignment4Length)
			cipher = cipher[:-16] + cipher[real_block_offset:real_block_offset+16]
			if verify(r,cipher):
				c = chr(0x10 ^ ord(cipher[-17]) ^ ord(cipher[real_block_offset-1]) ) # plaintext (padding 0x10) ^ cipher[-17] = AES output for our block, AES output for our block ^ block before = plaintext (flag)
				secret += c
				alignment2Length -= 1
				alignment4Length += 1
				sys.stdout.write(c)
				sys.stdout.flush()
				r.close()
				break
			r.close()
	sys.stdout.write("\n")
	sys.stdout.flush()
	return secret

flagLen = getFlagLength()
print("Flag length: %d"%flagLen)
flag = readSecret(flagLen)
print("Flag: %s"%flag)